#!/bin/bash

cd "${3}";
# Define log file path
LOG_FILE="script.log"

echo $( pwd );

echo -e "\e[93mUnload existing modules and restart PulseAudio\e[0m"
pactl unload-module module-ladspa-sink
pactl unload-module module-loopback
pactl unload-module module-echo-cancel
echo -e "\e[91mERRORS reported above HERE ARE NORMAL. restarting audio server now:\e[0m"
killall -HUP pipewire-pulse

# Load configuration variables
SINKA="beta_loopy";
SINKB="beta_kombo";
SINKC="beta_recz";

echo -e "\e[93m*HOUSEKEEPING SOUND SERVERS*\e[0m";
echo "** dando uma enxugada nos processos de audio.";
sleep 1
echo -n .
sleep 1;
echo -n .
echo -e "\e[93mINIT MIC\"SINK A\"\e[0m";
echo -e "\e[93mLoading module-remap-source for microphone sink\e[0m";
pactl load-module module-remap-source source_name=${SINKA} master=$(pactl list short sources | grep alsa_input | head -n1 | \awk '{ print $2 }');

# Load the echo cancellation module to cancel echo
echo -e "\e[93mLoad module-echo-cancel\e[0m";
pactl load-module module-echo-cancel sink_name="echo-cancell" master=${SINKA} \
        aec_method=webrtc aec_args="analog_gain_control=0 digital_gain_control=0";

#Load Ladspa effects
echo -e "\e[93mLoad module-ladspa-sink for pitch\e[0m"
pactl load-module module-ladspa-sink sink_name=LADSPA_pitch plugin="tap_pitch" label=tap_pitch control="5,10,1,1,0" master=echo-cancell;
#echo -e "\e[93mLoad module-ladspa-sink for autotalent\e[0m"
#pactl load-module module-ladspa-sink sink_name=ladspa_talent plugin="tap_autotalent" label=autotalent master=LADSPA_pitch;
echo -e "\e[93mLoad module-ladspa-sink for declipper\e[0m"
pactl load-module module-ladspa-sink sink_name=${SINKB} plugin="declip_1195" label=declip master=LADSPA_pitch;


sleep 1
echo -n .
#pactl load-module module-loopback source=${SINKB} sink=$( pactl list sinks short | grep output | head -n1 | awk '{ print $2 }' )

sleep 1; 
echo -n .
echo "\e[93maAtivando monitor do microfone\e[0m";
pactl set-source-volume "$SINKA" 60%
pactl set-source-volume "$SINKB" 70%

#ffplay -window_title "Visual de INPUT" -hide_banner -loglevel quiet -f pulse -i ${SINKB} & 

ffmpeg -window_title "Visual de INPUT" -hide_banner -loglevel quiet -f pulse -i ${SINKB} -filter_complex "[0:a]showwaves=s=1280x720:colors=red:mode=line,format=yuv420p[l];[l]life,format=yuv420p[v]" \
 -map "[v]" -map 0:a -c:v libx264 -preset ultrafast -c:a copy -f matroska - | ffplay - &

echo -e "\e[91m[VOCÊ] deve Ajustar volume do mic ...\e[0m"
echo -e "\e[92msStarting to download lyrics-video and record audio\e[0m"; 
##################################
# PREPARE to Record the audio with effects applied

if [ "${2}" != "" ];
then
	echo -e "\e[93m[YT-DL] Received apparently a URL, gonna try get lyrics video..\e[0m"; 
	PLAYBETA_TITLE="$( yt-dlp --get-title "${2}" )";
	echo  ${PLAYBETA_TITLE};
	#Got title, gonna get video :D
	yt-dlp "${2}" -o ${3}playz/${1}_playback \
	--embed-subs --progress;
	if [ $? -eq 0 ]; then
		BETA_PLAYFILE="$( ls -1 playz/${1}_playback.* | head -n1 )"
		PLAYBETA_LENGTH=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 ${3}"${BETA_PLAYFILE}")
		pavumeter &
		echo ${PLAYBETA_LENGTH};
		echo -e "\e[90mPREPARE-SE PARA CANTAR EM BREVE\e[0m"
		echo -e "\e[93m....\e[0m"
		echo "\e[90mPREPARE-se *5sec* para cantar\e[0m";
			sleep 3;
			echo ...2;
			
			sleep 1;
			echo -e "\e[91m...1\e[0m";
			ffplay -window_title "Tudo pronto! Feche essa janela para começar a gravar o vídeo." -hide_banner -loglevel quiet  "${3}research.wav";
		echo -e "\e[93mSING!--------------------------\e[0m"
		echo -e "\e[93m[FFMPEG] Video and audio Recording with effects applied...\e[0m"




	#old VIDEO RECORDER 
		ffmpeg -hide_banner  -loglevel quiet  -y -f v4l2 -input_format $( ffmpeg -loglevel quiet -hide_banner -formats \
			| grep -i $( v4l2-ctl --list-formats | egrep '\[[0-9]*\]' | \
			awk '{ print substr($2, 2, 3)}' | head -n1 ) | grep DE | \
			awk '{print $2}' | head -n1	) \
				 	-i /dev/video0 \
    							-strict experimental \
				-t ${PLAYBETA_LENGTH} "${3}recz/${1}_voc.mp4" &
		
	#LAUNCH VIDEO RECORDER v4l2
	echo -e "\e[91m..Launch v4l2-ctl to record VIDEO\e[0m"
	let result=${PLAYBETA_LENGTH}*100;
		v4l2-ctl --stream-mmap --stream-count=${result} \
									--stream-to="${3}recz/${1}_voc.mp4" &
	
	#Also we have a simple ffmpeg recorder
		#ffmpeg  -hide_banner -loglevel warning -y -f v4l2 -i /dev/video0 -c:v copy -t ${PLAYBETA_LENGTH} -strict experimental "${3}recz/${1}_voc.mp4" &
	#LAUNCH audio recorder SOX	
	echo -e "\e[91m..Launch SoX to record VOCALSs\e[0m"
		parec --device=${SINKB} --latency=13 | sox -V3 -t raw -r 48000 -b 16 -c 2 -e signed-integer - \
                                   -t wav -r 44100 -b 16 -c 2 -e signed-integer "${3}recz/${1}_voc.wav" \
                                                             dither -s -f improved-e-weighted -p 16 \
															 				trim 0 ${PLAYBETA_LENGTH} &
		# inaudible, a gambiarra do bug do echo-cancell :D
 		play -D ${SINKB} research.wav &
		
	echo -e "\e[90mLaunch lyrics video\e[0m"
	ffplay -window_title "CANTE! Feche essa janela para STOP " \
			-loglevel quiet -hide_banner -t ${PLAYBETA_LENGTH} \
									${3}"${BETA_PLAYFILE}" ; #This maintain players & recorders running
								# because keeps blocking execution on foreground. After we run kill -15						
	else
		echo -e "\e[91mFAILED LYRICS VIDEO.\e[0m"; 
		echo -e "\e[91mABORT\e[0m"; exit 1;
	fi
else
	echo -e "\e[91mINVALID URL --- no lyrics video\e[0m";
	echo -e "\e[91mABORT\e[0m"; exit 1;
fi

echo "\e[90msignal FFMpeg to interrupt rendering gracefully\e[0m";
killall -9 ffplay pavumeter; #tudo trsnqueira
killall -SIGINT sox; #dedsliga gravador de vox
killall -TERM ffmpeg; 
killall -HUP v4l2-ctl; #desliga gracvador de video
##pactl unload-module loopback-module;
######################### ignite post-processing
echo -e "\e[91mTRIGGER --- post-processing\e[0m";
${3}betaKE.sh "${1}" "${2}" "${3}" 2>&1 | tee -a "script.log" 

# 2024 by gu.pro.br